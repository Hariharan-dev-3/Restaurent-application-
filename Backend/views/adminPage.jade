doctype html
html
  head
    title admin
    link(rel="stylesheet", href="/static/profile/css/adminPage.css")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js")
    link(
      rel="stylesheet",
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css",
      integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr",
      crossorigin="anonymous"
    )
  body
    //- include ./navbar.jade

    section.search-sort-controls
      .mb-3
        label(for="searchInput") üîç Search Users:
        input#searchInput.form-control(type="text", placeholder="Search by name")

      .mb-3
        label(for="sortSelect") ‚ÜïÔ∏è Sort by username:
        select#sortSelect.form-select
          option(value="") -- Select Order --
          option(value="asc") A‚ÄìZ
          option(value="desc") Z‚ÄìA

    section.tableContainer
      table.table.table-bordered
        thead
          tr
            th UserName
            th Email
            th Role
            th Action
        tbody
          each user in users
            tr
              td= user.userName
              td= user.userEmail
              td= user.userRole
              td
                button.btn.btn-danger(onclick=`deleteUser("${user.userId}")`) Delete
                |  
                button.btn.btn-primary(onclick=`showPopup("${user.userId}", "${user.userName}", "${user.userRole}" , "${user.userEmail}")`) Update

    div#popupContainer(style="display: none")
      h3 Update User

      label(for="userIdInput") User ID:
      input#userIdInput(type="text", readonly=true)

      label(for="userNameInput") User Name:
      input#userNameInput(type="text")

      label(for="userRoleInput") User Role:
      input#userRoleInput(type="text")

      label(for="userEmailInput") User Email:
      input#userEmailInput(type="text")


      button.btn.btn-success(onclick="submitCredentials()") Submit
      button.btn.btn-secondary(onclick="hidePopup()") Cancel

    script.
      function handleLogout() {
        const isLoggedIn = sessionStorage.getItem("loggedIn");
        if (isLoggedIn) {
          localStorage.setItem("logoutFlag", "true");
          sessionStorage.clear();
          alert("üëã Logged out successfully!");
          window.location.href = "http://localhost:8000/api/v1/index/homePage";
        } else {
          alert("‚ö†Ô∏è You're not logged in.");
        }
      }

      function deleteUser(id) {
          const token = sessionStorage.getItem("authToken");

          if (!token) {
            alert("üö´ Access denied. No token available.");
            return;
          }

          if (confirm("Are you sure you want to delete this user?")) {
            fetch('/api/v1/user/deleteUser/' + id, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              }
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                alert("‚úÖ " + data.message);
                location.reload();
              } else {
                alert("‚ö†Ô∏è " + data.message);
              }
            })
            .catch(err => {
              console.error("Delete failed:", err);
              alert("‚ùå Something went wrong.");
            });
          }
        }

      function showPopup(id, name, role,email) {
        document.getElementById("popupContainer").style.display = "block";
        document.getElementById("userIdInput").value = id;
        document.getElementById("userNameInput").value = name;
        document.getElementById("userRoleInput").value = role;
        document.getElementById("userEmailInput").value = email;
      }

      function hidePopup() {
        document.getElementById("popupContainer").style.display = "none";
      }

      function submitCredentials() {
        const id = document.getElementById("userIdInput").value;
        const userName = document.getElementById("userNameInput").value;
        const userRole = document.getElementById("userRoleInput").value;
        const userEmail = document.getElementById("userEmailInput").value;
        const token = sessionStorage.getItem("authToken");

        fetch(`/api/v1/user/updateUser/${id}/${userName}/${userRole}/${userEmail}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        })
        .then(res => res.json())
        .then(data => {
          alert(data.message);
          hidePopup();
          location.reload();
        })
        .catch(err => {
          console.error("Submission failed:", err);
          alert("üö´ Unauthorized or something went wrong.");
        });
      }

      document.getElementById("sortSelect").addEventListener("change", function () {
        const order = this.value;

        fetch(`/api/v1/user/sort?order=${order}`)
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              const tbody = document.querySelector("tbody");
              tbody.innerHTML = ""; // Clear old content

              data.users.forEach(user => {
                const row = document.createElement("tr");
                row.innerHTML = `
                  <td>${user.userName}</td>
                  <td>${user.userEmail}</td>
                  <td>${user.userRole}</td>
                  <td>
                    <button class="btn btn-danger" onclick='deleteUser("${user.userId}")'>Delete</button> 
                    <button class="btn btn-primary" onclick='showPopup("${user.userId}", "${user.userName}", "${user.userRole}", "${user.userEmail}")'>Update</button>
                  </td>
                `;
                tbody.appendChild(row);
              });
            } else {
              alert("‚ö†Ô∏è Failed to sort users.");
            }
          })
          .catch(err => {
            console.error("Fetch error:", err);
            alert("‚ùå Error loading sorted users.");
          });
      });
