doctype html
html
  head
    title admin
    link(rel="stylesheet", href="/static/profile/css/adminPage.css")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js")
    link(
      rel="stylesheet",
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css",
      integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr",
      crossorigin="anonymous"
    )
  body
    //- include ./navbar.jade

    section.search-sort-controls
      .inputGroup
        label(for="searchInput") 🔍 Search Users
        input#searchInput.form-control(type="text", placeholder="Search by name")

      .inputGroup
        label(for="sortSelect") ↕️ Sort by username
        select#sortSelect.form-select
          option(value="") Select Order 
          option(value="asc") A–Z
          option(value="desc") Z–A

      .inputGroup
        label(for="sortFieldSelect") 🗂️ Sort By Field
        select#sortFieldSelect.form-select
          option(value="userName") Username
          option(value="userEmail") Email
          option(value="userRole") Role

      //- .inputGroup
      //-     label(for="pageSizeSelect") 📏 Page Size
      //-     select#pageSizeSelect.form-select
      //-       option(value="5") 5
      //-       option(value="10") 10
      //-       option(value="20") 20

    section.tableContainer
      table.table.table-bordered
        thead.headerTable
          tr
            th UserName
            th Email
            th Role
            th Action
        tbody
          each user in users
            tr
              td= user.userName
              td= user.userEmail
              td= user.userRole
              td
                button.btn.btn-danger(onclick=`deleteUser("${user.userId}")`) Delete
                |  
                button.btn.btn-primary(onclick=`showPopup("${user.userId}", "${user.userName}", "${user.userRole}" , "${user.userEmail}")`) Update

      section.paginationControls
          button#prevPageBtn.btn.btn-secondary(type="button") ⬅️ Previous
          button#nextPageBtn.btn.btn-secondary(type="button") ➡️ Next
          span#pageInfo Page #{currentPage} of #{totalPages}






    div#popupContainer(style="display: none")
      h3 Update User

      label(for="userIdInput") User ID:
      input#userIdInput(type="text", readonly=true)

      label(for="userNameInput") User Name:
      input#userNameInput(type="text")

      label(for="userRoleInput") User Role:
      input#userRoleInput(type="text")

      label(for="userEmailInput") User Email:
      input#userEmailInput(type="text")


      button.btn.btn-success(onclick="submitCredentials()") Submit
      button.btn.btn-secondary(onclick="hidePopup()") Cancel

    script.
      function handleLogout() {
        const isLoggedIn = sessionStorage.getItem("loggedIn");
        if (isLoggedIn) {
          localStorage.setItem("logoutFlag", "true");
          sessionStorage.clear();
          alert("👋 Logged out successfully!");
          window.location.href = "http://localhost:8000/api/v1/index/homePage";
        } else {
          alert("⚠️ You're not logged in.");
        }
      }

      function deleteUser(id) {
          const token = sessionStorage.getItem("authToken");

          if (!token) {
            alert("🚫 Access denied. No token available.");
            return;
          }

          if (confirm("Are you sure you want to delete this user?")) {
            fetch('/api/v1/user/deleteUser/' + id, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              }
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                alert("✅ " + data.message);
                location.reload();
              } else {
                alert("⚠️ " + data.message);
              }
            })
            .catch(err => {
              console.error("Delete failed:", err);
              alert("❌ Something went wrong.");
            });
          }
        }

      function showPopup(id, name, role,email) {
        document.getElementById("popupContainer").style.display = "block";
        document.getElementById("userIdInput").value = id;
        document.getElementById("userNameInput").value = name;
        document.getElementById("userRoleInput").value = role;
        document.getElementById("userEmailInput").value = email;
      }

      function hidePopup() {
        document.getElementById("popupContainer").style.display = "none";
      }

      function submitCredentials() {
        const id = document.getElementById("userIdInput").value;
        const userName = document.getElementById("userNameInput").value;
        const userRole = document.getElementById("userRoleInput").value;
        const userEmail = document.getElementById("userEmailInput").value;
        const token = sessionStorage.getItem("authToken");

        fetch(`/api/v1/user/updateUser/${id}/${userName}/${userRole}/${userEmail}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        })
        .then(res => res.json())
        .then(data => {
          alert(data.message);
          hidePopup();
          location.reload();
        })
        .catch(err => {
          console.error("Submission failed:", err);
          alert("🚫 Unauthorized or something went wrong.");
        });
      }

    
      function renderUsers(users) {
        console.log(users)
        users.forEach(user => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${user.userName}</td>
            <td>${user.userEmail}</td>
            <td>${user.userRole}</td>
            <td>
              <button class="btn btn-danger" onclick='deleteUser("${user.userId}")'>Delete</button>
              <button class="btn btn-primary" onclick='showPopup("${user.userId}", "${user.userName}", "${user.userRole}", "${user.userEmail}")'>Update</button>
            </td>
          `;
          tbody.appendChild(row);
        });
      }


      const searchInput = document.getElementById("searchInput");
      const sortSelect = document.getElementById("sortSelect");
      const tbody = document.querySelector("tbody");
      const token = sessionStorage.getItem("authToken");
      const sortFieldSelect = document.getElementById("sortFieldSelect");
      const headers = {
        "Content-Type": "application/json",
        ...(token ? { Authorization: `Bearer ${token}` } : {})
      };

      let currentPage = 1;
      const pageSize = 5;

      function handleUserFetch() {
        const search = searchInput.value.trim();
        const sortOrder = sortSelect.value;
        const sortBy = sortFieldSelect.value || "userName";
        
        const payload = { search, sortBy, sortOrder, page: currentPage, pageSize };

        fetch("/api/v1/user/getUsers", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        })
          .then(res => res.json())
          .then(data => {
            tbody.innerHTML = "";

            if (data.success && data.users.length > 0) {
              renderUsers(data.users);
              totalPages = data.totalPages;
              updatePagination();
            } else if (data.success && data.users.length === 0) {
              showEmptyMessage("🔍 No matching users found.");
              totalPages = data.totalPages || 1;
              updatePagination();
            } else {
              showEmptyMessage("❌ Server error. Please try again.");
            }
          })
          .catch(err => {
            console.error("Fetch error:", err);
            showEmptyMessage("❌ Failed to load users.");
          });
      }


      searchInput.addEventListener("input", () => {
        currentPage = 1; 
        handleUserFetch();
      });

      sortSelect.addEventListener("change", () => {
        currentPage = 1;
        handleUserFetch();
      });

      sortFieldSelect.addEventListener("change", () => {
      currentPage = 1;
      handleUserFetch();
        });


        const prevPageBtn = document.getElementById("prevPageBtn");
        const nextPageBtn = document.getElementById("nextPageBtn");
        const pageInfo = document.getElementById("pageInfo");

        function updatePagination() {
          pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
          prevPageBtn.disabled = currentPage <= 1;
          nextPageBtn.disabled = currentPage >= totalPages;
        }

        prevPageBtn.addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            handleUserFetch();
          }
        });

        nextPageBtn.addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            handleUserFetch();
          }
        });


      function showEmptyMessage(message) {
        tbody.innerHTML = `
          <tr>
            <td colspan="4" style="text-align: center; color: #888;">${message}</td>
          </tr>
        `;
      }

      window.addEventListener("DOMContentLoaded", () => {
        handleUserFetch();
      });

